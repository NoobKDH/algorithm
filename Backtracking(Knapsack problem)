#include <stdio.h>
#include <time.h>

const int n = 6; 
const int W = 20; 
int maxprofit = 0, numbest = 0;
int w[n + 1] = { 0, 2, 5, 10, 5, 7, 3}; 
int p[n + 1] = { 0, 40, 30, 50, 10, 25, 15 };
int include[n + 1] = { 0 };
int bestset[n + 1] = { 0 };

float promising(int i, int profit, int weight);

void knapsack(int i, int profit, int weight) {
    if (weight <= W && profit > maxprofit) {
        maxprofit = profit;
        numbest = i;
        for (int j = 1; j <= numbest; j++) {
            bestset[j] = include[j];
        }
    }

    if (promising(i, profit, weight)) {
        include[i + 1] = 1;
        knapsack(i + 1, profit + p[i + 1], weight + w[i + 1]);
        include[i + 1] = 0;
        knapsack(i + 1, profit, weight);
    }
}

float promising(int i, int profit, int weight) {
    int j, k;
    int totweight;
    float bound;
    if (weight >= W)
        return 0;
    else {
        j = i + 1;
        bound = (float)profit;
        totweight = weight;

        while (j <= n && totweight + w[j] <= W) {
            totweight += w[j];
            bound += p[j];
            j++;
        }

        k = j;
        if (k <= n)
            bound = bound + (W - totweight) * ((float)p[k] / w[k]);

        return bound > maxprofit;
    }
}

int main(void) {
    clock_t start, end;

    start = clock();
    knapsack(0, 0, 0);
    end = clock();

    printf("maxprofit = %d\n", maxprofit);
    printf("bestset = ");
    for (int s = 1; s <= n; s++) {
        printf("%d", bestset[s]);
    }
    printf("\n");
    double res = (double)(end - start);
    printf("시간: %f\n", res);
    return 0;
}
